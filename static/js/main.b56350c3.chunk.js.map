{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","search_field","target","value","state","string","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVACaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACA,qBACAC,IAAK,UACLC,IAAM,wBAAwBH,EAAMI,QAAQC,GAAG,cAE/C,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNTC,EAAW,SAAAR,GAAK,OAE1B,aAF+B,CAE/B,OAAKC,UAAY,YAAjB,SACED,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJ3CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SACjBa,KAAO,SACPF,YAAaA,EACbG,SAAYF,MCuCDG,E,kDApCb,aAAc,IAAD,8BACX,gBASFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,aAAaF,EAAEG,OAAOC,SATrC,EAAKC,MAAO,CACVC,OAAQ,UACRd,SAAU,GAEVU,aAAc,IANL,E,qDAab,WAAoB,IAAD,OACnBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKV,SAAS,CAACT,SAASmB,S,oBACtC,WAAS,IAAD,SAC2BC,KAAKP,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,aACXW,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAaa,kBACnD,OACE,sBAAK/B,UAAU,MAAf,UACA,6BAAK4B,KAAKP,MAAMC,SAChB,wBAAQW,QAAW,kBAAM,EAAKhB,SAAS,CAACK,OAAQ,WAAhD,qBACA,uBAEA,cAAC,EAAD,CAAWX,YAAc,iBACzBC,aAAgBgB,KAAKhB,eACrB,cAAC,EAAD,CAAUJ,SAAYqB,W,GA9BVK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b56350c3.chunk.js","sourcesContent":["import './card.style.css';\nexport const Card = props => (\n    <div className='card-container'>\n    <img \n    alt ='monster' \n    src ={'https://robohash.org/'+props.monster.id+'?set=set2'} \n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n    </div>\n);","import './card-list.style.css';\nimport {Card} from '../card/card.component';\nexport const CardList = props => (//where procs is the attributes inside the tag \n                                  //and props.children is the acutal data passed in between\n   <div className = 'card-list'>\n    {props.monsters.map((monster) => <Card key={monster.id} monster={monster}></Card>)}\n    </div>\n);\n","import './search-box.styles.css'\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search'\n    type = 'search'\n    placeholder={placeholder}\n    onChange = {handleChange}\n    />\n)","// import logo from './logo.svg';\nimport './App.css';\nimport {Component} from 'react';\nimport { div } from 'prelude-ls';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\nclass App extends Component {\n  constructor(){//help in initializing the data\n    super();//will call the constructor in component\n    this.state= {\n      string: 'Monster',\n      monsters: [\n      ],\n      search_field: '',\n\n    }\n  }\n  handleChange = (e) =>{\n    this.setState({search_field:e.target.value});\n  }\n  componentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(data => this.setState({monsters:data}));}\n  render(){\n    const {monsters, search_field} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(search_field.toLowerCase()));\n    return(\n      <div className='App'>\n      <h1>{this.state.string}</h1>\n      <button onClick = {() => this.setState({string: 'World'})}>Click M</button>\n      <br />\n\n      <SearchBox placeholder = 'Search monster' \n      handleChange = {this.handleChange} />\n      <CardList monsters = {filteredMonsters} />\n      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}